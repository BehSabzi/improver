#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to run spotdata extraction."""
import argparse

from improver.spotdata.main import run_spotdata


def valid_latitude(value):
    """
    Ensures latitude values fall in allowed range.

    Args:
    -----
    value : int/float
        The latitude value to be checked.

    Returns:
    --------
    value : int/float
        The checked latitude value.

    Raises:
    -------
    ArgumentTypeError if latitude is not in valid range.

    """
    value = float(value)
    if value < -90 or value > 90:
        raise argparse.ArgumentTypeError(
            "{} not in range [-90,90]".format(value))
    return value


def valid_longitude(value):
    """
    Ensures longitude values fall in allowed range.

    Args:
    -----
    value : int/float
        The longitude value to be checked.

    Returns:
    --------
    value : int/float
        The checked longitude value.

    Raises:
    -------
    ArgumentTypeError if longitude is not in valid range.

    """
    value = float(value)
    if value < -180 or value > 180:
        raise argparse.ArgumentTypeError(
            "{} not in range [-180,180]".format(value))
    return value


def site_dictionary(latitudes, longitudes, altitudes):
    """
    Format lists of latitudes, latitude and altitudes into site by site
    dictionary entries.

    Args:
    -----
    latitude/longitudes/altitudes : Lists of ints/floats
        Lists of latitudes, longitudes, and altitudes that define the spotdata
        sites.

    Returns:
    --------
    site_properties : dict
        A dictionary of sites, with a latitude, longitude and altitude defined
        for each site.

    """
    if len(latitudes) != len(longitudes):
        raise ValueError('Unequal no. of latitudes and longitudes provided.')

    if altitudes is None:
        altitudes = [None] * len(latitudes)

    if len(latitudes) != len(altitudes):
        raise ValueError('No. of altitudes does not match no. of latitudes/'
                         ' longitudes.')

    site_properties = []
    for site, _ in enumerate(latitudes):
        site_properties.append({
            'latitude': latitudes[site],
            'longitude': longitudes[site],
            'altitude': altitudes[site]
            })

    return site_properties


def main():
    """Load in arguments and start spotdata process."""
    parser = argparse.ArgumentParser(
        description='SpotData : A configurable tool to extract spot-data '
                    'from gridded diagnostics. The method of interpolating '
                    'and adjusting the resulting data can be set by defining '
                    'suitable diagnostics configurations.')

    parser.add_argument('config_file_path',
                        help='Path to a json file defining the recipes for '
                        'extracting diagnostics at SpotData sites from '
                        'gridded data.')
    parser.add_argument('data_path', type=str,
                        help='Path to diagnostic data files.')
    parser.add_argument('ancillary_path', type=str,
                        help='Path to ancillary (time invariant) data files.')
    parser.add_argument('--diagnostics', type=str, nargs='+', default=None,
                        help='A list of diagnostics that are to be processed. '
                             'If unset, all diagnostics defined in the '
                             'config_file will be produced; e.g. '
                             'temperature wind_speed')

    # File based site definitions.
    parser.add_argument('--site_path', type=str,
                        help='Path to site data file if this is being used '
                             'to choose sites.')
    parser.add_argument('--constants_path', type=str,
                        help='Path to json file containing constants to use '
                             'in SpotData methods.')

    # Run time site definition options.
    parser.add_argument('--latitudes', type=valid_latitude, metavar='(-90,90)',
                        nargs='+',
                        help='List of latitudes of sites of interest.')
    parser.add_argument('--longitudes', type=valid_longitude,
                        metavar='(-180,180)', nargs='+',
                        help='List of longitudes of sites of interest.')
    parser.add_argument('--altitudes', type=float, nargs='+',
                        help='List of altitudes of sites of interest.')

    # Forecast date/time information.
    parser.add_argument('--forecast_date', type=str,
                        help='Start date of forecast in format YYYYMMDD '
                             '(e.g. 20170327 = 27th March 2017).')
    parser.add_argument('--forecast_time', type=int,
                        help='Starting hour of forecast in 24hr clock. '
                             '(e.g. 3 = 03Z, 14 = 14Z).')
    parser.add_argument('--forecast_length', type=int,
                        help='Length of forecast in hours.')
    parser.add_argument('--output_path', type=str,
                        help='Path to which output files should be written.')
    parser.add_argument('--multiprocess', type=bool,
                        help='Process diagnostics using multiprocessing.')

    args = parser.parse_args()

    site_properties = []
    if args.latitudes is not None:
        site_properties = site_dictionary(args.latitudes, args.longitudes,
                                          args.altitudes)

    run_spotdata(args.config_file_path, args.data_path, args.ancillary_path,
                 diagnostic_list=args.diagnostics, site_path=args.site_path,
                 constants_file_path=args.constants_path,
                 site_properties=site_properties,
                 forecast_date=args.forecast_date,
                 forecast_time=args.forecast_time,
                 forecast_length=args.forecast_length,
                 output_path=args.output_path,
                 use_multiprocessing=args.multiprocess)

if __name__ == "__main__":
    main()
