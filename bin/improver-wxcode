#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""CLI to generate wet bulb temperatures from air temperature, relative
   humidity, and pressure data. """

import argparse

import iris

from improver.wxcode.weather_symbols import (
    WeatherSymbols)


def main():
    """Parser to accept input data and an output destination before invoking
    the wxcode (weather symbols) plugin. """
    parser = argparse.ArgumentParser(
        description='Calculate a cube of weather symbol codes.')
    parser.add_argument('probability_of_rainfall_rate',
                        metavar='PROBABILITY_OF_RAINFALL_RATE',
                        help='File path to a cube of '
                        'probability_of_rainfall_rate'
                        ' at the points for which the weather symbols '
                        'are being calculated.')
    parser.add_argument('probability_of_lwe_snowfall_rate',
                        metavar='PROBABILITY_OF_LWE_SNOWFALL_RATE',
                        help='File path to a cube of '
                        'probability_of_lwe_snowfall_rate'
                        ' at the points for which the weather symbols '
                        'are being calculated.')
    parser.add_argument('probability_of_cloud_area_fraction',
                        metavar='PROBABILITY_OF_CLOUD_AREA_FRACTION',
                        help='File path to a cube of '
                        'probability_of_cloud_area_fraction'
                        ' at the points for which the weather symbols '
                        'are being calculated.')
    parser.add_argument('probability_of_visibility_in_air',
                        metavar='PROBABILITY_OF_VISIBILITY_IN_AIR',
                        help='File path to a cube of '
                        'probability_of_visibility_in_air'
                        ' at the points for which the weather symbols '
                        'are being calculated.')
    parser.add_argument('probability_of_cloud_area_fraction_'
                        'below_1000_feet_asl',
                        metavar='PROBABILITY_OF_CLOUD_AREA_FRACTION'
                                '_BELOW_1000_FEET_ASL',
                        help='File path to a cube of '
                        'probability_of_cloud_area_fraction_assuming_'
                        'only_consider_surface_to_1000_feet_asl'
                        ' at the points for which the weather symbols '
                        'are being calculated.')
    parser.add_argument('probability_of_lwe_snowfall_rate_in_vicinity',
                        metavar='PROBABILITY_OF_LWE_SNOWFALL_RATE_IN_'
                        'VICINITY',
                        help='File path to a cube of '
                        'probability_of_lwe_snowfall_rate_in_vicinity'
                        ' at the points for which the weather symbols '
                        'are being calculated.')
    parser.add_argument('probability_of_rainfall_rate_in_vicinity',
                        metavar='PROBABILITY_OF_RAINFALL_RATE_IN_VICINITY',
                        help='File path to a cube of '
                        'probability_of_rainfall_rate_in_vicinity'
                        ' at the points for which the weather symbols '
                        'are being calculated.')
    parser.add_argument('output_filepath', metavar='OUTPUT_FILE',
                        help='The output path for the processed NetCDF.')

    args = parser.parse_args()

    input_filepaths = []
    for name, path in args.__dict__.iteritems():
        if name is not 'output_filepath':
            input_filepaths.append(path)
    cubes = iris.load(input_filepaths)

    result = (WeatherSymbols().process(cubes))
    iris.save(result, args.output_filepath, unlimited_dimensions=[])


if __name__ == "__main__":
    main()
