#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to spotdata extraction."""
import argparse

import iris

from improver.spotdata.framework import run_framework

def valid_latitude(value):
    value = float(value)
    if value < -90 or value > 90:
        raise argparse.ArgumentTypeError("{} not in range [-90,90]".format(value))
    return value

def valid_longitude(value):
    value = float(value)
    if value < -180 or value > 180:
        raise argparse.ArgumentTypeError("{} not in range [-180,180]".format(value))
    return value


def main():
    """Load in arguments and start spotdata process."""
    parser = argparse.ArgumentParser(
        description='SpotData : A configurable tool to extract spot-data '
                    'from gridded diagnostics. The method of interpolating '
                    'and adjusting the resulting data can be set by choosing '
                    'a suitable configuration.')
                                    
    parser.add_argument('config_name',
                        help='SpotData configuration to use, defining which '
                             'diagnostics to produce and how to interpolate '
                             'and tweak the data.'
                        )
    parser.add_argument('data_path', type=str,
                        help='Path to diagnostic data files.'
                        )
    parser.add_argument('ancillary_path', type=str,
                        help='Path to ancillary (time invariant) data files.'
                        )
    parser.add_argument('--site_path', type=str,
                        help='Path to site data file if this is being used '
                             'to choose sites.'
                        )
    parser.add_argument('--latitudes', type=valid_latitude, metavar='(-90,90)',
                        nargs='+',
                        help='List of latitudes of sites of interest.'
                        )
    parser.add_argument('--longitudes', type=valid_longitude, metavar='(-180,180)',
                        nargs='+',
                        help='List of longitudes of sites of interest.'
                        )
    parser.add_argument('--altitudes', type=float, nargs='+',
                        help='Altitudes of sites of interest.'
                        )
    parser.add_argument('--site_ids', type=float, nargs='+',
                        help='ID numbers for sites can be set if desired.'
                        )
    parser.add_argument('--start_date', type=str,
                        help='Start date of forecast in format YYYYMMDD '
                             '(e.g. 20170327 = 27th March 2017).'
                        )
    parser.add_argument('--start_time', type=int,
                        help='Starting hour of forecast in 24hr clock. '
                             '(e.g. 3 = 03Z, 14 = 14Z).'
                        )
    parser.add_argument('--length', type=int,
                        help='Length of forecast in hours.'
                        )
    parser.add_argument('--multiprocess', type=bool,
                        help='Process diagnostics using multiprocessing.'
                        )

    args = parser.parse_args()

    run_framework(args.config_name, args.data_path, args.ancillary_path,
                  site_path=args.site_path, latitudes=args.latitudes,
                  longitudes=args.longitudes, altitudes=args.altitudes,
                  site_ids=args.site_ids,
                  forecast_date=args.start_date, forecast_time=args.start_time,
                  forecast_length=args.length,
                  use_multiprocessing=args.multiprocess)

if __name__ == "__main__":
    main()
