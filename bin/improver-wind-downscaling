#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to run wind downscaling."""

import argparse

import iris

from improver import wind_downscaling


def main():
    """Load in arguments and get going."""
    parser = argparse.ArgumentParser(
        description='')
    parser.add_argument('wind_speed_filepath', metavar='WIND_SPEED_FILE',
                        help='Location of the wind speed on standard grid'
                             ' file. Any units can be supplied.')
    parser.add_argument('a_over_s_filepath',  metavar='AOS_FILE',
                        help='Location of model silhouette roughness file. '
                             'Units of field: dimensionless')
    parser.add_argument('sigma_filepath', metavar='SIGMA_FILE',
                        help='Location of standard deviation of model '
                             'orography height file. Units of field: m')
    #TODO: is 'highres' an appropriate name for this field?
    parser.add_argument('highres_orog_filepath',
                        metavar='HIGH_RESOLUTION_OROGRAPHY_FILE',
                        help='Location of high resolution orography file. '
                             'Units of field: m')
    parser.add_argument('standard_orog_filepath',
                        metavar='STANDARD_OROGRAPHY_FILE',
                        help='Location of orography on standard grid file '
                             '(interpolated model orography.'
                             ' Units of field: m')
    parser.add_argument('model_resolution', metavar='MODEL_RESOLUTION',
                        help='Original resolution of model orography (before'
                             ' interpolation to standard grid).'
                             ' Units of field: m')
    parser.add_argument('output_filepath', metavar='OUTPUT_FILE',
                        help='The output path for the processed NetCDF')
    parser.add_argument('--height_levels_filepath', metavar='HEIGHT_LEVELS',
                        help='Location of file containing height levels '
                             'coincident with wind speed field.')
    parser.add_argument('--z0_filepath', metavar='VEGETATIVE_ROUGHNESS_LENGTH',
                        help='Location of vegetative roughness length file.'
                             ' Units of field: m')
    args = parser.parse_args()
    wind_speed = iris.load_cube(args.wind_speed_filepath)
    a_over_s = iris.load_cube(args.a_over_s_filepath)
    sigma = iris.load_cube(args.sigma_filepath)
    highres_orog = iris.load_cube(args.highres_orog_filepath)
    standard_orog = iris.load_cube(args.standard_orog_filepath)
    if args.height_levels_filepath:
        height_levels = iris.load_cube(args.height_levels_filepath)
    else:
        height_levels = None
    if args.z0_filepath:
        z0_cube = iris.load_cube(args.z0_filepath)
    else:
        z0_cube = None
    result = (
        RoughnessCorrection(
            a_over_s, sigma, highres_orog, standard_orog,
            args.model_resolution, z0_cube=z0_cube, 
            height_levels_cube=height_levels).process(wind_speed))
    iris.save(result, args.output_filepath, unlimited_dimensions=[])


if __name__ == "__main__":
    main()

                        

