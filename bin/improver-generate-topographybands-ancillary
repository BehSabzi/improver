#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to run topographic bands ancillary generation."""

import argparse
import os
import iris
from glob import glob

from improver.generate_ancillaries.generate_ancillary import (
    GenerateOrographyBandAncils)
from improver.generate_ancillaries.generate_ancillary import (
     find_standard_ancil)

# The following dictionary defines the orography bands masks are required for.
#   'land': land points outside the band are set to 0 and those within
#           the band are set to 1.
#   'max_land_threshold': land points above the threshold are set to 0
#           and those above the threshold are set to 1.
#   In both cases, sea points are masked and set to the default fill_value
THRESHOLDS_DICT = {'land': [[-500, 0], [0, 50], [50, 100], [100, 150],
                           [150, 200], [200, 250], [250, 300], [300, 400],
                           [400, 500], [500, 600]],
                  'max_land_threshold': [[600]]}


def main():
    """Load in arguments and get going."""
    parser = argparse.ArgumentParser(
        description=('Read input orography and landmask fields. Mask '
                     'data inside the bounds specified in the '
                     'THRESHOLD_DICT dictionary' ))
    parser.add_argument('--force', dest='force', default=False,
                        action='store_true',
                        help=('If True, ancillaries will be generated even '
                              'if doing so will overwrite existing files'))
    parser.add_argument('input_filepath_stage_orography',
                        metavar='INPUT_FILE_STAGE_OROGRAPHY',
                        help=('A path to an input NetCDF file (from StaGE) '
                              'containing the orography to be processed.'))
    parser.add_argument('input_filepath_landmask', metavar='INPUT_FILE_LAND',
                        help='A path to an input land mask file.')
    parser.add_argument('output_filepath', metavar='OUTPUT_FILE',
                        help='The output path for the processed NetCDF.')
    parser.add_argument('grid', metavar='STANDARD_GRID',
                        help='The standard grid to process landmask on.')
    args = parser.parse_args()

    if not os.path.exists(args.output_filepath) or args.force:
        orography = find_standard_ancil(
            args.grid, args.input_filepath_stage_orography)
        if len(glob(args.input_filepath_stage_orography)) == 0:
            iris.save(orography, args.input_filepath_stage_orography)
        try:
            landmask = iris.load(args.input_filepath_landmask)[0]
        except IOError:
            msg = ('Cannot locate land mask at {}; '
                   'run improver-generateancil_landmask first.')
            raise IOError(msg.format(args.input_filepath_landmask))
        result = GenerateOrographyBandAncils().process(
            orography, landmask, THRESHOLDS_DICT)
        iris.save(result, args.output_filepath, unlimited_dimensions=[])
    else:
        print 'File already exists here: ', args.output_filepath


if __name__ == "__main__":
    main()
