#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to extract subcubes given constraints."""

import argparse
import iris

from improver.utilities.cube_extraction import (parse_constraint_list,
                                                extract_subcube)
from improver.utilities.save import save_netcdf

iris.FUTURE.netcdf_no_unlimited = True
iris.FUTURE.netcdf_promote = True


def main():
    """Invoke the extraction of a cube."""

    parser = argparse.ArgumentParser(description='Extracts subcube from'
                                     ' a cube, subject to constraints.')
    parser.add_argument('input_file', metavar='INPUT_FILE',
                        help="File containing a single cube to extract from.")
    parser.add_argument('output_file', metavar='OUTPUT_FILE',
                        help="File to write the extracted cube to.")

    parser.add_argument('constraints', metavar='CONSTRAINTS', nargs='+',
                        help="The constraint(s) to be applied.")
    parser.add_argument('--units', metavar='UNITS', nargs='+', default=None,
                        help='Optional: units of coordinate constraint(s) to '
                        'be applied, for use when the input cube coordinate '
                        'units are not ideal (eg for float equality). If '
                        'used, this list must match the CONSTRAINTS list in '
                        'order and length (with null values set to None).')
    args = parser.parse_args()

    constraints, units = parse_constraint_list(args.constraints, args.units)
    try:
        cube = extract_subcube(args.input_file, constraints, units)
    except ValueError:
        msg = ("Constraint(s) could not be matched in input cube")
        raise ValueError(msg)
    else:
        save_netcdf(cube, output_filename)


if __name__ == '__main__':
    main()
